import { <%= classify(name) %>Model } from "../../models/<%= dasherize(name) %>.model";
import { I<%= classify(name) %>Create } from "../../<%= dasherize(name) %>.interface";
import { CreateDtoFromModel } from "src/common/helpers/create-from-model.dto";
<% 
// Create DTO에서 자동 제외할 필드들
const autoExcludeFields = ["id", "createdAt", "updatedAt", "deletedAt"];

// Pick 필드: 필수 필드들 (?가 없는 필드)
// - optional이 false이고
// - 자동생성이 아니고 (@default, @updatedAt 등)
// - @id가 아니고
// - 제외 목록에 없는 필드
const pickFields = prismaModel && prismaModel.fields 
    ? prismaModel.fields.filter((f) => 
        f.optional === false &&           // ?가 없는 필수 필드
        !f.isAutoGenerated &&             // 자동생성 아니고
        !f.isId &&                        // @id 아니고
        !autoExcludeFields.includes(f.name) // 제외 목록에 없는 것
      ).map((f) => `"${f.name}"`)
    : [];

// Optional 필드: 선택적 필드들 (?가 있는 필드)
// - optional이 true이고
// - @id가 아니고
// - 제외 목록에 없는 필드
const optionalFields = prismaModel && prismaModel.fields 
    ? prismaModel.fields.filter((f) => 
        f.optional === true &&            // ?가 있는 선택적 필드
        !f.isId &&                        // @id 아니고
        !autoExcludeFields.includes(f.name) // 제외 목록에 없는 것
      ).map((f) => `"${f.name}"`)
    : [];
%>
export class <%= classify(name) %>CreateDto
  extends CreateDtoFromModel({
    model: <%= classify(name) %>Model,
    pick: [<%= pickFields.join(", ") %>],
    optional: [<%= optionalFields.join(", ") %>],
  })
  implements I<%= classify(name) %>Create {}

