import { Injectable } from "@nestjs/common";
import { PrismaCoreService } from "@utils/.boilerplate/modules/prisma-core/prisma-core.service";
import { Prisma } from "@prisma/client";
import { I<%= classify(name) %>FindMany } from "././<%= dasherize(name) %>.type"

@Injectable()
export class <%= classify(name) %>Repository extends CommonRepository {
    private repository = this.prisma.<%= camelize(name) %>;
    constructor(private readonly prisma: PrismaCoreService) {
        super();
    }

    async create(data: Prisma.<%= classify(name) %>CreateInput) {
        return this.repository.create({
            data,
        });
    }

    async findUnique(where: Prisma.<%= classify(name) %>WhereUniqueInput) {
        return this.repository.findUnique({
            where: { id, deletedAt: null, ...where },
        });
    }

    async findMany(query:I<%= classify(name) %>FindMany) {
        const { take, page } = query;
        return this.prisma.$transaction(async tx => {
            const resources = await tx["<%= camelize(name) %>"].findMany({
                where: { deletedAt: null },
                take,
                skip: (page - 1) * take,
            });
            const totalCount = await tx["<%= camelize(name) %>"].count();

            return { resources, meta: this.getMetaForFindList(query, totalCount) };
        });
    }

    async update(where: Prisma.<%= classify(name) %>WhereUniqueInput, data: Prisma.<%= classify(name) %>UpdateInput) {
        return this.repository.update({ where, data });
    }

    async sofrDelete(id: number) {
        return this.repository.delete({ where: { id } });
    }
}


