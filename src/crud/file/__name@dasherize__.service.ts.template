import { Injectable } from "@nestjs/common";
import { I<%= classify(name) %>Create, I<%= classify(name) %>FindUnique, I<%= classify(name) %>FindMany, I<%= classify(name) %>Update } from "./<%= dasherize(name) %>.type";
import { PrismaService, Prisma } from "src/core/prisma/prisma.service";
import { Constant } from "./<%= dasherize(name) %>.constant";

@Injectable()
export class <%= classify(name) %>Service extends CommonService {
    constructor(private readonly prisma: PrismaService) {
        super(Constant)
    }

    async create(data: I<%= classify(name) %>Create) {
        return this.prisma.<%= dasherize(name) %>.create({ data });
    }

    async findUnique(data: I<%= classify(name) %>FindUnique) {
        return this.prisma.<%= dasherize(name) %>.findUnique({
            where: {
                ...data
            }
        });
    }
    
    async fidnMany({ page, take, sort, ...rest }: I<%= classify(name) %>FindMany) {
        const option: Prisma.<%= classify(name) %>FindManyArgs = {
            where: { ...rest },
            take,
            skip: (page - 1) * take,
            orderBy: (() => {
                switch (sort) {
                default:
                    return { createdAt: "desc" };
                }
            })(),
        };

        const [resources, totalCount] = await this.prisma.$transaction([
            this.prisma.<%= dasherize(name) %>.findMany(option),
            this.prisma.<%= dasherize(name) %>.count({ where: option.where }),
        ]);

        const meta = this.getMetaData({
            page,
            take,
            totalCount,
        });

        return { resources, meta };
    }

    async update(data: I<%= classify(name) %>Update) {
        const { id, ...rest } = data;
        return this.prisma.<%= dasherize(name) %>.update({
            where: {
                id
            },
            data: {
                ...rest
            }
        });
    }

    async softDelete(id: number) {
        return this.prisma.<%= dasherize(name) %>.update({
            where: { id },
            data: {
                deletedAt: new Date()
            }
        });
    }
}
