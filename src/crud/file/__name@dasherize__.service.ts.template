import { Injectable } from "@nestjs/common";
import { I<%= classify(name) %>Create, I<%= classify(name) %>FindUnique, I<%= classify(name) %>FindMany, I<%= classify(name) %>Update } from "./<%= dasherize(name) %>.type";
import { PrismaService } from "src/core/prisma/prisma.service";

@Injectable()
export class <%= classify(name) %>Service {
    constructor(private readonly prisma: PrismaService) {}

    async create(data: I<%= classify(name) %>Create) {
        return this.prisma.<%= dasherize(name) %>.create(data);
    }

    async findUnique(args: I<%= classify(name) %>FindUnique) {
        return this.prisma.<%= dasherize(name) %>.findUnique(args);
    }
    
    async fidnMany(query: I<%= classify(name) %>FindMany) {
        return this.prisma.<%= dasherize(name) %>.findMany(query);
    }

    async update(id: number, args: I<%= classify(name) %>Update) {
        return this.prisma.<%= dasherize(name) %>.update({ id }, args);
    }

    async softDelete(id: number) {
        return this.prisma.<%= dasherize(name) %>.sofrDelete(id);
    }
}
