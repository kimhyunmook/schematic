import { Body, Param, ParseIntPipe, Query } from "@nestjs/common";
import { Constant as CONSTANT } from "../<%= dasherize(name) %>.constant";
import { ApiController } from "src/common/decorators/api.decorator";
import { <%= classify(name) %>Service } from "../<%= dasherize(name) %>.service";
import { IdOnlyResponseDto, NullDataResponseDto } from "src/common/dto/response.dto";
import { CommonController } from "src/common/utils/common.controller";
import { ApiDocs } from "src/common/decorators/api-docs-option.decorator";
import {
    <%= classify(name) %>CreateDto,
    <%= classify(name) %>UpdateDto,
    <%= classify(name) %>FindManyDto,
    <%= classify(name) %>FindManyResponseDto,
    <%= classify(name) %>FindUniqueResponseDto
} from "../dto/<%= dasherize(name) %>.dto"

@ApiController("management/<%= dasherize(name) %>")
export class <%= classify(name) %>Controller extends CommonController  {
    constructor(private readonly service: <%= classify(name) %>Service) {
        super(CONSTANT.NAME);
    }

    @ApiDocs({ endpoint: ":id", summary: `${CONSTANT.NAME} 상세 조회` }, true)
    async findUnique(@Param("id", ParseIntPipe) id: number): Promise<<%= classify(name) %>FindUniqueResponseDto> {
        const res = await this.service.findUnique({ id });
        return this.responseData(this.FIND_UNIQUE, res);
    }

    @ApiDocs({ summary: `${CONSTANT.NAME} 목록 조회` }, true)
    async findMany(@Query() query: <%= classify(name) %>FindManyDto): Promise<<%= classify(name) %>FindManyResponseDto> {
        const { resources, meta } = await this.service.fidnMany(query);
        return this.responseData(this.FIND_MANY, resources, meta);
    }

    @ApiDocs({ method: "POST", summary: `${CONSTANT.NAME} 생성` }, true)
    async create(@Body() body: <%= classify(name) %>CreateDto): Promise<IdOnlyResponseDto> {
        const { id } = await this.service.create(body);
        return this.responseData(this.CREATE, { id });
    }


    @ApiDocs({ method: "PATCH", endpoint: ":id", summary: `${CONSTANT.NAME} 수정` }, true)
    async update(@Param("id", ParseIntPipe) id: number, @Body() body: <%= classify(name) %>UpdateDto): Promise<NullDataResponseDto> {
        await this.service.update(id, body);
        return this.responseData(this.UPDATE);
    }

    @ApiDocs({ method: "DELETE", endpoint: ":id", summary: `${CONSTANT.NAME} 삭제` }, true)
    async softDelete(@Param("id") id: number): Promise<NullDataResponseDto> {
        await this.service.softDelete(id);
        return this.responseData(this.DELETE);
    }
}
